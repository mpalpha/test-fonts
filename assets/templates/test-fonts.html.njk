<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <title>{{ fontName }}</title>
    <style>
      * {
        padding: 0%;
        margin: 0%;
      }
      body {
        margin: 0%;
        padding: 1rem 0%;
        background: #fff;
        color: #222;
        font-family:"Helvetica Neue", Arial, sans-serif;
      }

      h1, .light-table-filter {
        margin: 1rem;
        font-size: 2rem;
        font-weight: normal;
      }

      table {
        width: 100%;
        border-spacing: 0px;
      }
      
      th, td {
        text-align: left;
        padding: 1rem;
        border-bottom: 1px solid #ccc;
        white-space: nowrap;
      }
      
      tbody tr:hover {background-color: #dfdfdf;}
      
      .hide {display: none;}

      .even {background-color: #f5f5f5;}

      .text-center {
        text-align: center;
      }

      .overflow-x-auto {
        overflow-x: auto;
      }
      
      tr i {
        transition: transform .2s; /* Animation */
      }
      tr:hover i {
        transform: scale(1.75); /* (175% zoom - Note: if the zoom is too large, it will go outside of the viewport) */
      }

      @font-face {
        font-family: "{{ fontName }}";
        font-style: normal;
        font-weight: 400;
        font-display: auto;
        {% if formats.indexOf('eot')>-1 -%}
          src: url("{{ fontPath }}{{ fontName }}.eot?{{ cacheString }}");
        {%- endif %}
        {%- set eotIndex = formats.indexOf('eot') -%}
        {%- set woff2Index = formats.indexOf('woff2') -%}
        {%- set woffIndex = formats.indexOf('woff') -%}
        {%- set ttfIndex = formats.indexOf('ttf') -%}
        {%- set svgIndex = formats.indexOf('svg') %}
        src: {% if eotIndex != -1 -%}
          url("{{ fontPath }}{{ fontName }}.eot?#iefix") format("embedded-opentype")
          {%- set nothing = formats.splice(eotIndex, 1) -%}
          {%- if formats.length != 0 -%}, {% else -%}; {% endif -%}
        {%- endif -%}
        {%- if woff2Index != -1 -%}
          url("{{ fontPath }}{{ fontName }}.woff2?{{ cacheString }}") format("woff2")
          {%- set nothing = formats.splice(woff2Index, 1) -%}
          {%- if formats.length != 0 -%}, {% else -%}; {% endif -%}
        {%- endif -%}
        {%- if woffIndex != -1 -%}
          url("{{ fontPath }}{{ fontName }}.woff?{{ cacheString }}") format("woff")
          {%- set nothing = formats.splice(woffIndex, 1) -%}
          {%- if formats.length != 0 -%}, {% else -%}; {% endif -%}
        {%- endif -%}
        {%- if ttfIndex != -1 -%}
          url("{{ fontPath }}{{ fontName }}.ttf?{{ cacheString }}") format("truetype")
          {%- set nothing = formats.splice(ttfIndex, 1) -%}
          {%- if formats.length != 0 -%}, {% else -%}; {% endif -%}
        {%- endif -%}
        {%- if svgIndex != -1 -%}
          url("{{ fontPath }}{{ fontName }}.svg?{{ cacheString }}#{{ fontName }}") format("svg");
        {%- endif %}
      }

      .{{ className }} {
        display: inline-block;
        font-family: "{{ fontName }}";
        font-weight: 400;
        font-style: normal;
        font-variant: normal;
        text-rendering: auto;
        line-height: 1;
        -moz-osx-font-smoothing: grayscale;
        -webkit-font-smoothing: antialiased;
        -webkit-font-feature-settings: 'liga';
        /* Support for IE. */
        font-feature-settings: 'liga';
      }

      .{{ className }}-spin {
        animation: {{ className }}-spin 2s infinite linear;
      }
      @keyframes {{ className }}-spin {
        0% {
          transform: rotate(0deg);
        }

        100% {
          transform: rotate(359deg);
        }
      }

      .{{ className }}-pulse {
        animation: {{ className }}-pulse 1s infinite steps(8);
      }
      @keyframes {{ className }}-pulse {
        0% {
          transform: scale(0.999);
        }

        30% {
          transform: scale(0.999);
        }

        40% {
          transform: scale(1.08);
        }

        50% {
          transform: scale(0.999);
        }

        60% {
          transform: scale(0.999);
        }

        70% {
          transform: scale(1.05);
        }

        80% {
          transform: scale(0.999);
        }

        100% {
          transform: scale(0.999);
        }
      }

      .{{ className }}-lg {
        font-size: 1.33333em;
        line-height: 0.75em;
        vertical-align: -0.0667em;
      }

      .{{ className }}-xs {
        font-size: 0.75em;
      }

      .{{ className }}-sm {
        font-size: 0.875em;
      }

      .{{ className }}-1x {
        font-size: 1em;
      }

      .{{ className }}-2x {
        font-size: 2em;
      }

      .{{ className }}-3x {
        font-size: 3em;
      }

      .{{ className }}-4x {
        font-size: 4em;
      }

      .{{ className }}-5x {
        font-size: 5em;
      }

      .{{ className }}-6x {
        font-size: 6em;
      }

      .{{ className }}-7x {
        font-size: 7em;
      }

      .{{ className }}-8x {
        font-size: 8em;
      }

      .{{ className }}-9x {
        font-size: 9em;
      }

      .{{ className }}-10x {
        font-size: 10em;
      }

      .{{ className }}-fw {
        text-align: center;
        width: 1.25em;
      }

      .{{ className }}-border {
        border: solid 0.08em #eee;
        border-radius: 0.1em;
        padding: 0.2em 0.25em 0.15em;
      }

      .{{ className }}-pull-left {
        float: left;
      }

      .{{ className }}-pull-right {
        float: right;
      }

      .{{ className }}.{{ className }}-pull-left {
        margin-right: 0.3em;
      }

      .{{ className }}.{{ className }}-pull-right {
        margin-left: 0.3em;
      }

      {% for glyph in glyphs %}
      .{{ className }}.{{ glyph.name }}::before {
        content: "\{{ glyph.unicode[0].charCodeAt(0).toString(16) }}";
        content: "{{ glyph.unicode[1] }}";
      }
      {% endfor %}
    </style>
  </head>
  <body>
    <h1>Icons: {{ className }}</h1>
    <input type="search" class="light-table-filter" data-table="order-table" placeholder="Search">
    <div class="overflow-x-auto">
      <table class="order-table table">
        <thead>
          <tr>
            <th>Icon</th>
            <th>Class</th>
            <th>Ligature</th>
            <th>Code</th>
          </tr>
        </thead>
        <tbody>
          {% for glyph in glyphs %}
          <tr>
            <td><i class="{{ className }} {{ className }}-2x {{ glyph.name }}"></i></td>
            <td>.{{ glyph.name }}</td>
            <td>{{glyph.unicode[1]}}</td>
            <td>
              <pre>{{ '<i class="' | escape }}{{ className }}{{ '">'  | escape }}{{glyph.unicode[1]}}{{'</i>' | escape }}</pre>
            </td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    <script>
      (function(document) {
        'use strict';

        var LightTableFilter = (function(Arr) {

          var _input;

          function _onInputEvent(e) {
            _input = e.target;
            var tables = document.getElementsByClassName(_input.getAttribute('data-table'));
            Arr.forEach.call(tables, function(table) {
              Arr.forEach.call(table.tBodies, function(tbody) {
                Arr.forEach.call(tbody.rows, _filter);
                ([...tbody.querySelectorAll('tr:not(.hide)')]).forEach(function(row, index){
                  row.classList.toggle('even', ~index & 1);
                });
              });
            });
          }

          function _filter(row) {
            var text = row.children[2].textContent.toLowerCase(), val = _input.value.toLowerCase();
            row.classList.toggle('hide', text.replace(/_/g, ' ').indexOf(val) === -1)
          }

          return {
            init: function() {
              var inputs = document.getElementsByClassName('light-table-filter');
              Arr.forEach.call(inputs, function(input) {
                input.oninput = _onInputEvent;
                _onInputEvent({target: input});
              });
            }
          };
        })(Array.prototype);

        document.addEventListener('readystatechange', function() {
          if (document.readyState === 'complete') {
            LightTableFilter.init();
          }
        });

      })(document);
    </script>
  </body>
</html>
